kind: pipeline
name: default

workspace:
  base: /go
  path: src/github.com/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}

steps:

- name: test
  image: golang:1.13
  pull: true
  commands:
  - go vet
  - go test -cover -coverprofile=coverage.out

- name: build_linux_amd64
  image: golang:1.13
  depends_on: [ test ]
  environment:
    GOOS: linux
    GOARCH: amd64
    CGO_ENABLED: 0
  commands:
  - |
    if test "${DRONE_TAG}" = ""; then
      go build -v -ldflags "-X main.build=${DRONE_BUILD_NUMBER}" -a -o release/linux/amd64/${DRONE_REPO_NAME}
    else
      go build -v -ldflags "-X main.version=${DRONE_TAG##v} -X main.build=${DRONE_BUILD_NUMBER}" -a -o release/linux/amd64/${DRONE_REPO_NAME}
    fi

- name: build_linux_arm64
  image: golang:1.13
  depends_on: [ test ]
  environment:
    GOOS: linux
    GOARCH: arm64
    CGO_ENABLED: 0
  commands:
  - |
    if test "${DRONE_TAG}" = ""; then
      go build -v -ldflags "-X main.build=${DRONE_BUILD_NUMBER}" -a -o release/linux/arm64/${DRONE_REPO_NAME}
    else
      go build -v -ldflags "-X main.version=${DRONE_TAG##v} -X main.build=${DRONE_BUILD_NUMBER}" -a -o release/linux/arm64/${DRONE_REPO_NAME}
    fi

- name: build_linux_arm
  image: golang:1.13
  depends_on: [ test ]
  environment:
    GOOS: linux
    GOARCH: arm
    CGO_ENABLED: 0
    GOARM: 7
  commands:
  - |
    if test "${DRONE_TAG}" = ""; then
      go build -v -ldflags "-X main.build=${DRONE_BUILD_NUMBER}" -a -o release/linux/arm/${DRONE_REPO_NAME}
    else
      go build -v -ldflags "-X main.version=${DRONE_TAG##v} -X main.build=${DRONE_BUILD_NUMBER}" -a -o release/linux/arm/${DRONE_REPO_NAME}
    fi

- name: publish linux arm64
  image: plugins/ecr
  depends_on: [build_linux_arm]
  settings:
    mirror:
      from_secret: docker_proxy_mirror
    #auto_tag_suffix: ${DRONE_BRANCH,,}
    auto_tag_suffix: _arm64
    auto_tag: true
    purge: false
    #tags:
    #  - ${DRONE_COMMIT}
    registry:
      from_secret: registry
    repo:
      from_secret: repository_standalone_task
    dockerfile: Dockerfile.arm64
    region:
      from_secret: region
  when:
    event:
      exclude:
        - pull_request

- name: publish linux amd
  image: plugins/ecr
  depends_on: [build_linux_amd]
  settings:
    mirror:
      from_secret: docker_proxy_mirror
    #auto_tag_suffix: ${DRONE_BRANCH,,}
    #auto_tag_suffix: _amd
    auto_tag: true
    purge: false
    #tags:
    #  - ${DRONE_COMMIT}
    registry:
      from_secret: registry
    repo:
      from_secret: repository_standalone_task
    dockerfile: Dockerfile.arm
    region:
      from_secret: region
  when:
    event:
      exclude:
        - pull_request

- name: publish linux amd64
  image: plugins/ecr
  depends_on: [build_linux_amd64]
  settings:
    mirror:
      from_secret: docker_proxy_mirror
    auto_tag_suffix: _amd64
    auto_tag: true
    purge: false
    #tags:
    #  - ${DRONE_COMMIT}
    registry:
      from_secret: registry
    repo:
      from_secret: repository_standalone_task
    dockerfile: Dockerfile
    region:
      from_secret: region
  when:
    event:
      exclude:
        - pull_request

trigger:
  branch:
  - master
---
kind: "secret"
name: "aws_access_key_production"
get:
  path: "drone/co-production-drone-plugins"
  name: "aws_access_key"

---
kind: "secret"
name: "aws_access_key_secret_production"
get:
  path: "drone/co-production-drone-plugins"
  name: "aws_access_key_secret"

---
kind: "secret"
name: "region"
get:
  path: "drone/co-production-drone-plugins"
  name: "region"

---
kind: "secret"
name: "registry"
get:
  path: "drone/co-production-drone-plugins"
  name: "registry"

---
kind: "secret"
name: "repository_standalone_task"
get:
  path: "drone/co-production-drone-plugins"
  name: "repository_standalone_task"